/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.timesheet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.timesheet.model.Expense;
import com.liferay.timesheet.model.ExpenseModel;
import com.liferay.timesheet.model.ExpenseSoap;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the Expense service. Represents a row in the &quot;Timesheet_Expense&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.timesheet.model.ExpenseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExpenseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExpenseImpl
 * @see com.liferay.timesheet.model.Expense
 * @see com.liferay.timesheet.model.ExpenseModel
 * @generated
 */
@JSON(strict = true)
public class ExpenseModelImpl extends BaseModelImpl<Expense>
	implements ExpenseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a expense model instance should use the {@link com.liferay.timesheet.model.Expense} interface instead.
	 */
	public static final String TABLE_NAME = "Timesheet_Expense";
	public static final Object[][] TABLE_COLUMNS = {
			{ "expenseId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "purchasedDate", Types.TIMESTAMP },
			{ "type_", Types.INTEGER },
			{ "value", Types.DOUBLE },
			{ "fileEntryId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Timesheet_Expense (expenseId LONG not null primary key,userId LONG,projectId LONG,description VARCHAR(75) null,purchasedDate DATE null,type_ INTEGER,value DOUBLE,fileEntryId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Timesheet_Expense";
	public static final String ORDER_BY_JPQL = " ORDER BY expense.purchasedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Timesheet_Expense.purchasedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.timesheet.model.Expense"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.timesheet.model.Expense"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Expense toModel(ExpenseSoap soapModel) {
		Expense model = new ExpenseImpl();

		model.setExpenseId(soapModel.getExpenseId());
		model.setUserId(soapModel.getUserId());
		model.setProjectId(soapModel.getProjectId());
		model.setDescription(soapModel.getDescription());
		model.setPurchasedDate(soapModel.getPurchasedDate());
		model.setType(soapModel.getType());
		model.setValue(soapModel.getValue());
		model.setFileEntryId(soapModel.getFileEntryId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Expense> toModels(ExpenseSoap[] soapModels) {
		List<Expense> models = new ArrayList<Expense>(soapModels.length);

		for (ExpenseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public Class<?> getModelClass() {
		return Expense.class;
	}

	public String getModelClassName() {
		return Expense.class.getName();
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.timesheet.model.Expense"));

	public ExpenseModelImpl() {
	}

	public long getPrimaryKey() {
		return _expenseId;
	}

	public void setPrimaryKey(long primaryKey) {
		setExpenseId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_expenseId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@JSON
	public long getExpenseId() {
		return _expenseId;
	}

	public void setExpenseId(long expenseId) {
		_expenseId = expenseId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public long getProjectId() {
		return _projectId;
	}

	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public Date getPurchasedDate() {
		return _purchasedDate;
	}

	public void setPurchasedDate(Date purchasedDate) {
		_purchasedDate = purchasedDate;
	}

	@JSON
	public int getType() {
		return _type;
	}

	public void setType(int type) {
		_type = type;
	}

	@JSON
	public double getValue() {
		return _value;
	}

	public void setValue(double value) {
		_value = value;
	}

	@JSON
	public long getFileEntryId() {
		return _fileEntryId;
	}

	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public Expense toEscapedModel() {
		if (isEscapedModel()) {
			return (Expense)this;
		}
		else {
			if (_escapedModelProxy == null) {
				_escapedModelProxy = (Expense)Proxy.newProxyInstance(_classLoader,
						_escapedModelProxyInterfaces,
						new AutoEscapeBeanHandler(this));
			}

			return _escapedModelProxy;
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Expense.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		ExpenseImpl expenseImpl = new ExpenseImpl();

		expenseImpl.setExpenseId(getExpenseId());
		expenseImpl.setUserId(getUserId());
		expenseImpl.setProjectId(getProjectId());
		expenseImpl.setDescription(getDescription());
		expenseImpl.setPurchasedDate(getPurchasedDate());
		expenseImpl.setType(getType());
		expenseImpl.setValue(getValue());
		expenseImpl.setFileEntryId(getFileEntryId());

		expenseImpl.resetOriginalValues();

		return expenseImpl;
	}

	public int compareTo(Expense expense) {
		int value = 0;

		value = DateUtil.compareTo(getPurchasedDate(),
				expense.getPurchasedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Expense expense = null;

		try {
			expense = (Expense)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = expense.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Expense> toCacheModel() {
		ExpenseCacheModel expenseCacheModel = new ExpenseCacheModel();

		expenseCacheModel.expenseId = getExpenseId();

		expenseCacheModel.userId = getUserId();

		expenseCacheModel.projectId = getProjectId();

		expenseCacheModel.description = getDescription();

		String description = expenseCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			expenseCacheModel.description = null;
		}

		Date purchasedDate = getPurchasedDate();

		if (purchasedDate != null) {
			expenseCacheModel.purchasedDate = purchasedDate.getTime();
		}
		else {
			expenseCacheModel.purchasedDate = Long.MIN_VALUE;
		}

		expenseCacheModel.type = getType();

		expenseCacheModel.value = getValue();

		expenseCacheModel.fileEntryId = getFileEntryId();

		return expenseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{expenseId=");
		sb.append(getExpenseId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", purchasedDate=");
		sb.append(getPurchasedDate());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.timesheet.model.Expense");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>expenseId</column-name><column-value><![CDATA[");
		sb.append(getExpenseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchasedDate</column-name><column-value><![CDATA[");
		sb.append(getPurchasedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Expense.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Expense.class
		};
	private long _expenseId;
	private long _userId;
	private String _userUuid;
	private long _projectId;
	private String _description;
	private Date _purchasedDate;
	private int _type;
	private double _value;
	private long _fileEntryId;
	private transient ExpandoBridge _expandoBridge;
	private Expense _escapedModelProxy;
}