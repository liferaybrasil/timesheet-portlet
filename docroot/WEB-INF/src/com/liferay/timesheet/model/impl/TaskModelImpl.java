/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.timesheet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.timesheet.model.Task;
import com.liferay.timesheet.model.TaskModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the Task service. Represents a row in the &quot;Timesheet_Task&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.timesheet.model.TaskModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TaskImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TaskImpl
 * @see com.liferay.timesheet.model.Task
 * @see com.liferay.timesheet.model.TaskModel
 * @generated
 */
public class TaskModelImpl extends BaseModelImpl<Task> implements TaskModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a task model instance should use the {@link com.liferay.timesheet.model.Task} interface instead.
	 */
	public static final String TABLE_NAME = "Timesheet_Task";
	public static final Object[][] TABLE_COLUMNS = {
			{ "taskId", Types.BIGINT },
			{ "endDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "projectId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "type_", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Timesheet_Task (taskId LONG not null primary key,endDate DATE null,name VARCHAR(75) null,projectId LONG,startDate DATE null,type_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Timesheet_Task";
	public static final String ORDER_BY_JPQL = " ORDER BY task.startDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Timesheet_Task.startDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.timesheet.model.Task"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.timesheet.model.Task"),
			true);

	public Class<?> getModelClass() {
		return Task.class;
	}

	public String getModelClassName() {
		return Task.class.getName();
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.timesheet.model.Task"));

	public TaskModelImpl() {
	}

	public long getPrimaryKey() {
		return _taskId;
	}

	public void setPrimaryKey(long primaryKey) {
		setTaskId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_taskId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public long getTaskId() {
		return _taskId;
	}

	public void setTaskId(long taskId) {
		_taskId = taskId;
	}

	public Date getEndDate() {
		return _endDate;
	}

	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	public long getProjectId() {
		return _projectId;
	}

	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	public Date getStartDate() {
		return _startDate;
	}

	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	public int getType() {
		return _type;
	}

	public void setType(int type) {
		_type = type;
	}

	@Override
	public Task toEscapedModel() {
		if (isEscapedModel()) {
			return (Task)this;
		}
		else {
			if (_escapedModelProxy == null) {
				_escapedModelProxy = (Task)Proxy.newProxyInstance(_classLoader,
						_escapedModelProxyInterfaces,
						new AutoEscapeBeanHandler(this));
			}

			return _escapedModelProxy;
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Task.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TaskImpl taskImpl = new TaskImpl();

		taskImpl.setTaskId(getTaskId());
		taskImpl.setEndDate(getEndDate());
		taskImpl.setName(getName());
		taskImpl.setProjectId(getProjectId());
		taskImpl.setStartDate(getStartDate());
		taskImpl.setType(getType());

		taskImpl.resetOriginalValues();

		return taskImpl;
	}

	public int compareTo(Task task) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(), task.getStartDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Task task = null;

		try {
			task = (Task)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = task.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Task> toCacheModel() {
		TaskCacheModel taskCacheModel = new TaskCacheModel();

		taskCacheModel.taskId = getTaskId();

		Date endDate = getEndDate();

		if (endDate != null) {
			taskCacheModel.endDate = endDate.getTime();
		}
		else {
			taskCacheModel.endDate = Long.MIN_VALUE;
		}

		taskCacheModel.name = getName();

		String name = taskCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			taskCacheModel.name = null;
		}

		taskCacheModel.projectId = getProjectId();

		Date startDate = getStartDate();

		if (startDate != null) {
			taskCacheModel.startDate = startDate.getTime();
		}
		else {
			taskCacheModel.startDate = Long.MIN_VALUE;
		}

		taskCacheModel.type = getType();

		return taskCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{taskId=");
		sb.append(getTaskId());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.timesheet.model.Task");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>taskId</column-name><column-value><![CDATA[");
		sb.append(getTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Task.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Task.class
		};
	private long _taskId;
	private Date _endDate;
	private String _name;
	private long _projectId;
	private Date _startDate;
	private int _type;
	private transient ExpandoBridge _expandoBridge;
	private Task _escapedModelProxy;
}